# Boxed Koji - Integration Testing Platform

This is a containerized integration testing platform for the Koji build system using Docker Compose and Podman.

## Project Overview

This project provides a complete, repeatable Koji environment with:
- PostgreSQL database backend
- Kerberos KDC for authentication
- Koji Hub (central coordination service)
- Koji Workers (build execution nodes)
- Koji Web (web frontend)
- Nginx reverse proxy
- Custom keytab service for principal management

## Architecture & Technology Stack

- **Containerization**: Docker Compose with Podman
- **Language**: Python 3.11+ (Flask services), Shell scripts
- **Database**: PostgreSQL
- **Authentication**: Kerberos KDC
- **Build System**: Koji (Fedora's build system)
- **Web Framework**: Flask (for keytab service)
- **Proxy**: Nginx
- **Orchestration**: Makefile with podman-compose

## Code Style & Standards

### Python Code
- Use Python 3.11+ features
- Follow PEP 8 style guidelines
- Use type hints where appropriate
- Use f-strings for string formatting
- Prefer pathlib.Path over os.path
- Use logging instead of print statements
- Structure Flask apps with proper error handling
- Use subprocess.run() with proper error handling

### Shell Scripts
- Use bash with `set -euo pipefail` for error handling
- Use meaningful variable names
- Quote variables to prevent word splitting
- Use heredoc for multi-line strings
- Follow POSIX standards where possible

### Docker & Containerization
- Use Alpine Linux base images when possible
- Multi-stage builds for optimization
- Use .dockerignore to reduce build context
- Set proper user permissions (non-root when possible)
- Include health checks for all services
- Use build args for customization

### Configuration Management
- Use environment variables with defaults
- Template configuration files with envsubst
- Separate secrets from configuration
- Use Docker Compose YAML anchors for DRY principle

## File Organization

```
koji-boxed/
├── services/           # Individual service Dockerfiles and scripts
├── data/               # Persistent data volumes
├── scripts/            # Utility scripts
├── tests/              # Integration tests
├── koji-src/           # Koji source code (cloned)
├── docker-compose.yml  # Service orchestration
├── Makefile           # Build and deployment commands
└── README.md          # Project documentation
```

## Development Patterns

### Service Development
- Each service has its own directory in `services/`
- Include Dockerfile, entrypoint script, and health check
- Use environment variables for configuration
- Implement proper logging and error handling
- Follow the 12-factor app methodology

### Configuration
- Use templates with environment variable substitution
- Store secrets in environment variables or mounted volumes
- Provide sensible defaults in docker-compose.yml
- Use YAML anchors for common configuration blocks

### Testing
- Write integration tests in `tests/`
- Test service interactions and end-to-end workflows
- Use shell scripts for test automation
- Include expected results for validation

### Logging
- Use structured logging with timestamps
- Log to stdout/stderr for container-friendly logging
- Use appropriate log levels (DEBUG, INFO, WARNING, ERROR)
- Include service identification in log messages

## Common Commands

- `make help` - Show available commands
- `make build` - Build all container images
- `make up` - Start all services
- `make down` - Stop all services
- `make logs` - View service logs
- `make test` - Run integration tests
- `make quick-start` - Build, start, and setup everything

## Service Dependencies

```
postgres → koji-hub → koji-worker
    ↓         ↓           ↓
   kdc ←──────┴───────────┘
    ↓
koji-web ←─── nginx (main entry point)
```

## Network Architecture

- Custom bridge network: `koji-network`
- Subnet: `172.20.0.0/16` (configurable)
- Service aliases: `*.koji.box` domain
- Main entry point: `koji.box` (nginx)

## Key Environment Variables

- `KRB5_REALM`: Kerberos realm (default: KOJI.BOX)
- `POSTGRES_*`: Database configuration
- `KOJI_*_URL`: Service URLs
- `KOJI_USER`/`KOJI_GROUP`: User/group for Koji services

## Security Considerations

- Run services as non-root users when possible
- Use proper file permissions (Z flag for SELinux)
- Store sensitive data in environment variables
- Use health checks for service monitoring
- Implement proper Kerberos principal management

## Debugging & Troubleshooting

- Check service logs with `make logs-<service>`
- Use `make shell-<service>` for interactive debugging
- Verify network connectivity between services
- Check Kerberos principal status
- Validate configuration files

## Contributing Guidelines

1. Follow the established code style
2. Add tests for new functionality
3. Update documentation as needed
4. Use meaningful commit messages
5. Test changes with `make test`
6. Ensure all services start successfully

## Performance Considerations

- Use resource limits in docker-compose.yml
- Monitor memory usage of services
- Optimize Docker images (multi-stage builds)
- Use volume mounts for persistent data
- Implement proper caching strategies

When working on this project:
- Always test changes in the containerized environment
- Use the Makefile commands for common operations
- Follow the service dependency chain
- Pay attention to Kerberos principal management
- Ensure proper error handling and logging
- Maintain backward compatibility with existing configurations

## Git Operations
- **CRITICAL**: All git commands must be run through the git_operations subagent
- **MANDATORY COMMIT FORMAT**: Always use `git commit -F - << 'EOF'` for all commits
- **NO EXCEPTIONS**: Never use `git commit -F "message"` or other commit formats
- **REFERENCE**: See `.cursor/subagents/git_operations.md` for complete guidelines
